<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [Sensor_Read_V2\Sensor_Read_V2.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image Sensor_Read_V2\Sensor_Read_V2.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Sat Sep 19 18:50:12 2020
<BR><P>
<H3>Maximum Stack Usage =        784 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; AD5940_Main_AMP &rArr; AppAMPInit &rArr; AppAMPRtiaCal &rArr; AD5940_LPRtiaCal &rArr; AD5940_DSPCfgS &rArr; AD5940_ADCFilterCfgS &rArr; AD5940_AFECtrlS &rArr; AD5940_ReadReg &rArr; AD5940_SPIReadReg &rArr; AD5940_ReadWrite8B &rArr; AD5940_ReadWriteNBytes &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[db]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[85]">ADC3_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[85]">ADC3_IRQHandler</a><BR>
 <LI><a href="#[8]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">BusFault_Handler</a><BR>
 <LI><a href="#[6]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">HardFault_Handler</a><BR>
 <LI><a href="#[7]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">MemManage_Handler</a><BR>
 <LI><a href="#[9]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">UsageFault_Handler</a><BR>
 <LI><a href="#[102]">AD5940_ClksCalculate</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[102]">AD5940_ClksCalculate</a><BR>
 <LI><a href="#[142]">AppIMPCtrl</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[142]">AppIMPCtrl</a><BR>
 <LI><a href="#[13b]">AppAMPCtrl</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[13b]">AppAMPCtrl</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[85]">ADC3_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[20]">ADC_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[87]">BDMA_Channel0_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[88]">BDMA_Channel1_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[89]">BDMA_Channel2_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[8a]">BDMA_Channel3_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[8b]">BDMA_Channel4_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[8c]">BDMA_Channel5_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[8d]">BDMA_Channel6_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[8e]">BDMA_Channel7_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[8]">BusFault_Handler</a> from stm32h7xx_it.o(i.BusFault_Handler) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[66]">CEC_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[8f]">COMP1_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[95]">CRS_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[57]">DCMI_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[76]">DFSDM1_FLT0_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[77]">DFSDM1_FLT1_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[78]">DFSDM1_FLT2_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[79]">DFSDM1_FLT3_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[19]">DMA1_Stream0_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[1a]">DMA1_Stream1_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[1b]">DMA1_Stream2_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[1c]">DMA1_Stream3_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[1d]">DMA1_Stream4_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[1e]">DMA1_Stream5_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[1f]">DMA1_Stream6_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[3c]">DMA1_Stream7_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[62]">DMA2D_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[45]">DMA2_Stream0_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[46]">DMA2_Stream1_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[47]">DMA2_Stream2_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[48]">DMA2_Stream3_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[49]">DMA2_Stream4_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[4d]">DMA2_Stream5_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[4e]">DMA2_Stream6_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[4f]">DMA2_Stream7_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[6e]">DMAMUX1_OVR_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[86]">DMAMUX2_OVR_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[b]">DebugMon_Handler</a> from stm32h7xx_it.o(i.DebugMon_Handler) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[96]">ECC_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[4a]">ETH_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[4b]">ETH_WKUP_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[14]">EXTI0_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[36]">EXTI15_10_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[15]">EXTI1_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[16]">EXTI2_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[17]">EXTI3_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[18]">EXTI4_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[25]">EXTI9_5_IRQHandler</a> from stm32h7xx_it.o(i.EXTI9_5_IRQHandler) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[21]">FDCAN1_IT0_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[23]">FDCAN1_IT1_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[22]">FDCAN2_IT0_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[24]">FDCAN2_IT1_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[4c]">FDCAN_CAL_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[12]">FLASH_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[3d]">FMC_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[59]">FPU_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[75]">HRTIM1_FLT_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[6f]">HRTIM1_Master_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[70]">HRTIM1_TIMA_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[71]">HRTIM1_TIMB_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[72]">HRTIM1_TIMC_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[73]">HRTIM1_TIMD_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[74]">HRTIM1_TIME_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[84]">HSEM1_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[6]">HardFault_Handler</a> from stm32h7xx_it.o(i.HardFault_Handler) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[2e]">I2C1_ER_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[2d]">I2C1_EV_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[30]">I2C2_ER_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[2f]">I2C2_EV_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[52]">I2C3_ER_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[51]">I2C3_EV_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[68]">I2C4_ER_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[67]">I2C4_EV_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[81]">JPEG_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[65]">LPTIM1_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[90]">LPTIM2_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[91]">LPTIM3_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[92]">LPTIM4_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[93]">LPTIM5_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[94]">LPUART1_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[61]">LTDC_ER_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[60]">LTDC_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[80]">MDIOS_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[7f]">MDIOS_WKUP_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[82]">MDMA_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[7]">MemManage_Handler</a> from stm32h7xx_it.o(i.MemManage_Handler) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[5]">NMI_Handler</a> from stm32h7xx_it.o(i.NMI_Handler) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[6b]">OTG_FS_EP1_IN_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[6a]">OTG_FS_EP1_OUT_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[6d]">OTG_FS_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[6c]">OTG_FS_WKUP_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[54]">OTG_HS_EP1_IN_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[53]">OTG_HS_EP1_OUT_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[56]">OTG_HS_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[55]">OTG_HS_WKUP_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[f]">PVD_AVD_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[c]">PendSV_Handler</a> from stm32h7xx_it.o(i.PendSV_Handler) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[64]">QUADSPI_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[13]">RCC_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[58]">RNG_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[37]">RTC_Alarm_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[11]">RTC_WKUP_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[4]">Reset_Handler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[5f]">SAI1_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[63]">SAI2_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[7a]">SAI3_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[97]">SAI4_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[3e]">SDMMC1_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[83]">SDMMC2_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[69]">SPDIF_RX_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[31]">SPI1_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[32]">SPI2_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[40]">SPI3_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[5c]">SPI4_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[5d]">SPI5_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[5e]">SPI6_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[a]">SVC_Handler</a> from stm32h7xx_it.o(i.SVC_Handler) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[7b]">SWPMI1_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[d]">SysTick_Handler</a> from stm32h7xx_it.o(i.SysTick_Handler) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[99]">SystemInit</a> from system_stm32h7xx.o(i.SystemInit) referenced from startup_stm32h743xx.o(.text)
 <LI><a href="#[10]">TAMP_STAMP_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[7c]">TIM15_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[7d]">TIM16_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[7e]">TIM17_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[26]">TIM1_BRK_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[29]">TIM1_CC_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[28]">TIM1_TRG_COM_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[27]">TIM1_UP_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[2a]">TIM2_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[2b]">TIM3_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[2c]">TIM4_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[3f]">TIM5_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[43]">TIM6_DAC_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[44]">TIM7_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[38]">TIM8_BRK_TIM12_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[3b]">TIM8_CC_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[3a]">TIM8_TRG_COM_TIM14_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[39]">TIM8_UP_TIM13_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[41]">UART4_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[42]">UART5_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[5a]">UART7_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[5b]">UART8_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[9d]">UART_DMAAbortOnError</a> from stm32h7xx_hal_uart.o(i.UART_DMAAbortOnError) referenced from stm32h7xx_hal_uart.o(i.HAL_UART_IRQHandler)
 <LI><a href="#[a1]">UART_RxISR_16BIT</a> from stm32h7xx_hal_uart.o(i.UART_RxISR_16BIT) referenced from stm32h7xx_hal_uart.o(i.HAL_UART_Receive_IT)
 <LI><a href="#[a1]">UART_RxISR_16BIT</a> from stm32h7xx_hal_uart.o(i.UART_RxISR_16BIT) referenced from stm32h7xx_hal_uart.o(i.UART_RxISR_16BIT_FIFOEN)
 <LI><a href="#[9f]">UART_RxISR_16BIT_FIFOEN</a> from stm32h7xx_hal_uart.o(i.UART_RxISR_16BIT_FIFOEN) referenced from stm32h7xx_hal_uart.o(i.HAL_UART_Receive_IT)
 <LI><a href="#[a0]">UART_RxISR_8BIT</a> from stm32h7xx_hal_uart.o(i.UART_RxISR_8BIT) referenced from stm32h7xx_hal_uart.o(i.HAL_UART_Receive_IT)
 <LI><a href="#[a0]">UART_RxISR_8BIT</a> from stm32h7xx_hal_uart.o(i.UART_RxISR_8BIT) referenced from stm32h7xx_hal_uart.o(i.UART_RxISR_8BIT_FIFOEN)
 <LI><a href="#[9e]">UART_RxISR_8BIT_FIFOEN</a> from stm32h7xx_hal_uart.o(i.UART_RxISR_8BIT_FIFOEN) referenced from stm32h7xx_hal_uart.o(i.HAL_UART_Receive_IT)
 <LI><a href="#[33]">USART1_IRQHandler</a> from stm32h7xx_it.o(i.USART1_IRQHandler) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[34]">USART2_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[35]">USART3_IRQHandler</a> from stm32h7xx_it.o(i.USART3_IRQHandler) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[50]">USART6_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[9]">UsageFault_Handler</a> from stm32h7xx_it.o(i.UsageFault_Handler) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[98]">WAKEUP_PIN_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[e]">WWDG_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[a2]">__main</a> from __main.o(!!!main) referenced from startup_stm32h743xx.o(.text)
 <LI><a href="#[9c]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[9b]">fputc</a> from usart.o(i.fputc) referenced from _printf_char_file.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[a2]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[a3]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[a5]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[1b8]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[1b9]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[1ba]"></a>__decompress</STRONG> (Thumb, 90 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[1bb]"></a>__decompress1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[1bc]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[a6]"></a>_printf_f</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_f.o(.ARM.Collect$$_printf_percent$$00000003))
<BR><BR>[Stack]<UL><LI>Max Depth = 324 + Unknown Stack Size
<LI>Call Chain = _printf_f &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[c7]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[a8]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[aa]"></a>_printf_x</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_x.o(.ARM.Collect$$_printf_percent$$0000000C))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_x &rArr; _printf_int_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[ac]"></a>_printf_s</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_s.o(.ARM.Collect$$_printf_percent$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_s &rArr; _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
</UL>

<P><STRONG><a name="[1bd]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[b7]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[ae]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>

<P><STRONG><a name="[1be]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[b0]"></a>__rt_lib_init_lc_common</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))
<BR><BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>

<P><STRONG><a name="[1bf]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[1c0]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[1c1]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[1c2]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[1c3]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[1c4]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[b2]"></a>__rt_lib_init_lc_numeric_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000016))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_numeric_2 &rArr; _get_lc_numeric
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[1c5]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[1c6]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[1c7]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[1c8]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[1c9]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[1ca]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[1cb]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[1cc]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[1cd]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[1ce]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[1cf]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[1d0]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[1d1]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[bc]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[1d2]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[1d3]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[1d4]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[1d5]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[1d6]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[1d7]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[1d8]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[a4]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[1d9]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[b4]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[b6]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[1da]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[b8]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 784 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; AD5940_Main_AMP &rArr; AppAMPInit &rArr; AppAMPRtiaCal &rArr; AD5940_LPRtiaCal &rArr; AD5940_DSPCfgS &rArr; AD5940_ADCFilterCfgS &rArr; AD5940_AFECtrlS &rArr; AD5940_ReadReg &rArr; AD5940_SPIReadReg &rArr; AD5940_ReadWrite8B &rArr; AD5940_ReadWriteNBytes &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[1db]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[dc]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[bb]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[1dc]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[bd]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[4]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[85]"></a>ADC3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC3_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC3_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[87]"></a>BDMA_Channel0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[88]"></a>BDMA_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[89]"></a>BDMA_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[8a]"></a>BDMA_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[8b]"></a>BDMA_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[8c]"></a>BDMA_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[8d]"></a>BDMA_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[8e]"></a>BDMA_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>CEC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[8f]"></a>COMP1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[95]"></a>CRS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>DCMI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[76]"></a>DFSDM1_FLT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[77]"></a>DFSDM1_FLT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[78]"></a>DFSDM1_FLT2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[79]"></a>DFSDM1_FLT3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>DMA1_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>DMA1_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>DMA1_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>DMA1_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>DMA1_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>DMA2D_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>DMA2_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>DMA2_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>DMA2_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>DMA2_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>DMA2_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>DMA2_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>DMA2_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>DMA2_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>DMAMUX1_OVR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[86]"></a>DMAMUX2_OVR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[96]"></a>ECC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>ETH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>ETH_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>FDCAN1_IT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>FDCAN1_IT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>FDCAN2_IT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>FDCAN2_IT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>FDCAN_CAL_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>FMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[75]"></a>HRTIM1_FLT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>HRTIM1_Master_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[70]"></a>HRTIM1_TIMA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[71]"></a>HRTIM1_TIMB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[72]"></a>HRTIM1_TIMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[73]"></a>HRTIM1_TIMD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[74]"></a>HRTIM1_TIME_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[84]"></a>HSEM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>I2C4_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>I2C4_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[81]"></a>JPEG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>LPTIM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[90]"></a>LPTIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[91]"></a>LPTIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[92]"></a>LPTIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[93]"></a>LPTIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[94]"></a>LPUART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>LTDC_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>LTDC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[80]"></a>MDIOS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[7f]"></a>MDIOS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[82]"></a>MDMA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>OTG_FS_EP1_IN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>OTG_FS_EP1_OUT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[6d]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>OTG_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>OTG_HS_EP1_IN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>OTG_HS_EP1_OUT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>OTG_HS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>OTG_HS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>PVD_AVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>QUADSPI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>SAI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>SAI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[7a]"></a>SAI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[97]"></a>SAI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>SDMMC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[83]"></a>SDMMC2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>SPDIF_RX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>SPI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>SPI5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>SPI6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[7b]"></a>SWPMI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[7c]"></a>TIM15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[7d]"></a>TIM16_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[7e]"></a>TIM17_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TIM8_BRK_TIM12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>TIM8_TRG_COM_TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>TIM8_UP_TIM13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>UART7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>UART8_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>USART6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[98]"></a>WAKEUP_PIN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[db]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32h743xx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[1a5]"></a>__aeabi_uldivmod</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, lludivv7m.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[1dd]"></a>_ll_udiv</STRONG> (Thumb, 238 bytes, Stack size 48 bytes, lludivv7m.o(.text), UNUSED)

<P><STRONG><a name="[15b]"></a>__aeabi_llsl</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WGFreqWordCal
</UL>

<P><STRONG><a name="[1de]"></a>_ll_shift_l</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[bf]"></a>__2printf</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, noretval__2printf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_Initialize
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VoltageShowResult
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ImpedanceShowResult
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMPShowResult
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940PlatformCfg_AMP
</UL>

<P><STRONG><a name="[c2]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>

<P><STRONG><a name="[c3]"></a>_printf_post_padding</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>

<P><STRONG><a name="[c1]"></a>_printf_str</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, _printf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[a9]"></a>_printf_int_dec</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
</UL>

<P><STRONG><a name="[ab]"></a>_printf_int_hex</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, _printf_hex_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_int_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[1df]"></a>_printf_longlong_hex</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, _printf_hex_int.o(.text), UNUSED)

<P><STRONG><a name="[c5]"></a>__printf</STRONG> (Thumb, 308 bytes, Stack size 40 bytes, __printf_flags_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[103]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_LPRtiaCal
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ClksCalculate
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_Initialize
</UL>

<P><STRONG><a name="[1e0]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[1e1]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[1e2]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[156]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_StructInit
</UL>

<P><STRONG><a name="[c8]"></a>__rt_memclr</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[1e3]"></a>_memset</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[160]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppIMPCtrl
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppAMPCtrl
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
</UL>

<P><STRONG><a name="[1e4]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[1e5]"></a>__rt_memclr_w</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[c9]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr
</UL>

<P><STRONG><a name="[1e6]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[1e7]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[1e8]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[ca]"></a>__read_errno</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, _rserrno.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>

<P><STRONG><a name="[cc]"></a>__set_errno</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, _rserrno.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log10
</UL>

<P><STRONG><a name="[c4]"></a>_printf_int_common</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[1e9]"></a>__lib_sel_fp_printf</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, _printf_fp_dec.o(.text), UNUSED)

<P><STRONG><a name="[d3]"></a>_printf_fp_dec_real</STRONG> (Thumb, 620 bytes, Stack size 104 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[d6]"></a>_printf_cs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[d7]"></a>_printf_char</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_char.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[ad]"></a>_printf_string</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>

<P><STRONG><a name="[c0]"></a>_printf_char_file</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, _printf_char_file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ferror
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[b1]"></a>__rt_locale</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_locale_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_common
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[cb]"></a>__aeabi_errno_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__read_errno
</UL>

<P><STRONG><a name="[1ea]"></a>__errno$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[1eb]"></a>__rt_errno_addr$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[d2]"></a>_ll_udiv10</STRONG> (Thumb, 138 bytes, Stack size 12 bytes, lludiv10.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[d8]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[d5]"></a>_printf_fp_infnan</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, _printf_fp_infnan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[ce]"></a>_btod_etento</STRONG> (Thumb, 224 bytes, Stack size 72 bytes, bigflt0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[d9]"></a>ferror</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ferror.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[1ec]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[da]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[1ed]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[b5]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[ba]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[1b4]"></a>strcmp</STRONG> (Thumb, 104 bytes, Stack size 0 bytes, strcmpv7m_pel.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[be]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[1ee]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[1ef]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[1f0]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[cf]"></a>_btod_d2e</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e))
<BR><BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[de]"></a>_d2e_denorm_low</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_denorm_low))
<BR><BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>

<P><STRONG><a name="[dd]"></a>_d2e_norm_op1</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_norm_op1))
<BR><BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_denorm_low
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
</UL>

<P><STRONG><a name="[df]"></a>__btod_div_common</STRONG> (Thumb, 696 bytes, Stack size 24 bytes, btod.o(CL$$btod_div_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[e0]"></a>_e2e</STRONG> (Thumb, 220 bytes, Stack size 24 bytes, btod.o(CL$$btod_e2e))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[d0]"></a>_btod_ediv</STRONG> (Thumb, 42 bytes, Stack size 28 bytes, btod.o(CL$$btod_ediv))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _btod_ediv &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[d1]"></a>_btod_emul</STRONG> (Thumb, 42 bytes, Stack size 28 bytes, btod.o(CL$$btod_emul))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_mult_common
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[e1]"></a>__btod_mult_common</STRONG> (Thumb, 580 bytes, Stack size 16 bytes, btod.o(CL$$btod_mult_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __btod_mult_common
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
</UL>

<P><STRONG><a name="[e2]"></a>AD5940AMPStructInit</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, ad5940main.o(i.AD5940AMPStructInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = AD5940AMPStructInit
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppAMPGetCfg
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_Main_AMP
</UL>

<P><STRONG><a name="[e4]"></a>AD5940ImpedanceStructInit</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, ad5940main.o(i.AD5940ImpedanceStructInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = AD5940ImpedanceStructInit
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppIMPGetCfg
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_Main_IMP
</UL>

<P><STRONG><a name="[f3]"></a>AD5940VoltageStructInit</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, ad5940main.o(i.AD5940VoltageStructInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = AD5940VoltageStructInit
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_APPVOLGetCfg
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_Main_VOL
</UL>

<P><STRONG><a name="[f5]"></a>AD5940_ADCBaseCfgS</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ad5940.o(i.AD5940_ADCBaseCfgS))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = AD5940_ADCBaseCfgS &rArr; AD5940_WriteReg &rArr; AD5940_ReadWrite8B &rArr; AD5940_ReadWriteNBytes &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_LPRtiaCal
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_DSPCfgS
</UL>

<P><STRONG><a name="[f7]"></a>AD5940_ADCDigCompCfgS</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, ad5940.o(i.AD5940_ADCDigCompCfgS))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = AD5940_ADCDigCompCfgS &rArr; AD5940_WriteReg &rArr; AD5940_ReadWrite8B &rArr; AD5940_ReadWriteNBytes &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_DSPCfgS
</UL>

<P><STRONG><a name="[f8]"></a>AD5940_ADCFilterCfgS</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, ad5940.o(i.AD5940_ADCFilterCfgS))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = AD5940_ADCFilterCfgS &rArr; AD5940_AFECtrlS &rArr; AD5940_ReadReg &rArr; AD5940_SPIReadReg &rArr; AD5940_ReadWrite8B &rArr; AD5940_ReadWriteNBytes &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ReadReg
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_AFECtrlS
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_DSPCfgS
</UL>

<P><STRONG><a name="[fa]"></a>AD5940_AFECtrlS</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, ad5940.o(i.AD5940_AFECtrlS))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = AD5940_AFECtrlS &rArr; AD5940_ReadReg &rArr; AD5940_SPIReadReg &rArr; AD5940_ReadWrite8B &rArr; AD5940_ReadWriteNBytes &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ReadReg
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppVOLSeqMeasureGen
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppVOLSeqCfgGen
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_LPRtiaCal
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppAMPSeqMeasureGen
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppAMPSeqCfgGen
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppIMPSeqMeasureGen
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppIMPSeqCfgGen
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ADCFilterCfgS
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__AD5940_TakeMeasurement
</UL>

<P><STRONG><a name="[fb]"></a>AD5940_AFEPwrBW</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ad5940.o(i.AD5940_AFEPwrBW))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = AD5940_AFEPwrBW &rArr; AD5940_WriteReg &rArr; AD5940_ReadWrite8B &rArr; AD5940_ReadWriteNBytes &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppVOLInit
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppIMPInit
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppAMPInit
</UL>

<P><STRONG><a name="[ee]"></a>AD5940_AGPIOCfg</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, ad5940.o(i.AD5940_AGPIOCfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = AD5940_AGPIOCfg &rArr; AD5940_AGPIOPen &rArr; AD5940_WriteReg &rArr; AD5940_ReadWrite8B &rArr; AD5940_ReadWriteNBytes &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_AGPIOPen
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_AGPIOOen
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_AGPIOIen
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_AGPIOFuncCfg
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940PlatformCfg_VOL
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940PlatformCfg_IMP
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940PlatformCfg_AMP
</UL>

<P><STRONG><a name="[fc]"></a>AD5940_AGPIOFuncCfg</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ad5940.o(i.AD5940_AGPIOFuncCfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = AD5940_AGPIOFuncCfg &rArr; AD5940_WriteReg &rArr; AD5940_ReadWrite8B &rArr; AD5940_ReadWriteNBytes &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_AGPIOCfg
</UL>

<P><STRONG><a name="[fe]"></a>AD5940_AGPIOIen</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ad5940.o(i.AD5940_AGPIOIen))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = AD5940_AGPIOIen &rArr; AD5940_WriteReg &rArr; AD5940_ReadWrite8B &rArr; AD5940_ReadWriteNBytes &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_AGPIOCfg
</UL>

<P><STRONG><a name="[fd]"></a>AD5940_AGPIOOen</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ad5940.o(i.AD5940_AGPIOOen))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = AD5940_AGPIOOen &rArr; AD5940_WriteReg &rArr; AD5940_ReadWrite8B &rArr; AD5940_ReadWriteNBytes &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_AGPIOCfg
</UL>

<P><STRONG><a name="[ff]"></a>AD5940_AGPIOPen</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ad5940.o(i.AD5940_AGPIOPen))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = AD5940_AGPIOPen &rArr; AD5940_WriteReg &rArr; AD5940_ReadWrite8B &rArr; AD5940_ReadWriteNBytes &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_AGPIOCfg
</UL>

<P><STRONG><a name="[e9]"></a>AD5940_CLKCfg</STRONG> (Thumb, 236 bytes, Stack size 24 bytes, ad5940.o(i.AD5940_CLKCfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = AD5940_CLKCfg &rArr; AD5940_HFOSC32MHzCtrl &rArr; AD5940_ReadReg &rArr; AD5940_SPIReadReg &rArr; AD5940_ReadWrite8B &rArr; AD5940_ReadWriteNBytes &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ReadReg
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_Delay10us
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WriteReg
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_HFOSC32MHzCtrl
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940PlatformCfg_VOL
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940PlatformCfg_IMP
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940PlatformCfg_AMP
</UL>

<P><STRONG><a name="[102]"></a>AD5940_ClksCalculate</STRONG> (Thumb, 366 bytes, Stack size 136 bytes, ad5940.o(i.AD5940_ClksCalculate))
<BR><BR>[Stack]<UL><LI>Max Depth = 180 + In Cycle
<LI>Call Chain = AD5940_ClksCalculate &rArr;  AD5940_ClksCalculate (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ClksCalculate
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_Notch60HzAvailable
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_Notch50HzAvailable
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppVOLSeqMeasureGen
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppAMPSeqMeasureGen
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ClksCalculate
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppIMPSeqMeasureGen
</UL>

<P><STRONG><a name="[13d]"></a>AD5940_ClrMCUIntFlag</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, appolloh7port.o(i.AD5940_ClrMCUIntFlag))
<BR><BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppVOLInit
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppIMPInit
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppAMPInit
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_Main_VOL
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_Main_IMP
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_Main_AMP
</UL>

<P><STRONG><a name="[134]"></a>AD5940_ComplexDivInt</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, ad5940.o(i.AD5940_ComplexDivInt))
<BR><BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_LPRtiaCal
</UL>

<P><STRONG><a name="[106]"></a>AD5940_ComplexMag</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, ad5940.o(i.AD5940_ComplexMag))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = AD5940_ComplexMag &rArr; __hardfp_sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_LPRtiaCal
</UL>

<P><STRONG><a name="[108]"></a>AD5940_ComplexPhase</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, ad5940.o(i.AD5940_ComplexPhase))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = AD5940_ComplexPhase &rArr; __hardfp_atan2 &rArr; atan &rArr; __hardfp_atan &rArr; __ARM_fpclassify
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_LPRtiaCal
</UL>

<P><STRONG><a name="[10a]"></a>AD5940_CsClr</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, appolloh7port.o(i.AD5940_CsClr))
<BR><BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_FIFORd
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SPIReadReg
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WriteReg
</UL>

<P><STRONG><a name="[10c]"></a>AD5940_CsSet</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, appolloh7port.o(i.AD5940_CsSet))
<BR><BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_FIFORd
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_Initialize
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_MCUResourceInit
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SPIReadReg
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WriteReg
</UL>

<P><STRONG><a name="[10d]"></a>AD5940_DFTCfgS</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, ad5940.o(i.AD5940_DFTCfgS))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = AD5940_DFTCfgS &rArr; AD5940_ReadReg &rArr; AD5940_SPIReadReg &rArr; AD5940_ReadWrite8B &rArr; AD5940_ReadWriteNBytes &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ReadReg
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_DSPCfgS
</UL>

<P><STRONG><a name="[10e]"></a>AD5940_DSPCfgS</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, ad5940.o(i.AD5940_DSPCfgS))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = AD5940_DSPCfgS &rArr; AD5940_ADCFilterCfgS &rArr; AD5940_AFECtrlS &rArr; AD5940_ReadReg &rArr; AD5940_SPIReadReg &rArr; AD5940_ReadWrite8B &rArr; AD5940_ReadWriteNBytes &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_DFTCfgS
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ADCFilterCfgS
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ADCDigCompCfgS
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ADCBaseCfgS
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_StatisticCfgS
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppVOLSeqCfgGen
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_LPRtiaCal
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppAMPSeqCfgGen
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppIMPSeqCfgGen
</UL>

<P><STRONG><a name="[101]"></a>AD5940_Delay10us</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, appolloh7port.o(i.AD5940_Delay10us))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = AD5940_Delay10us &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_LPRtiaCal
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_HWReset
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_CLKCfg
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__AD5940_TakeMeasurement
</UL>

<P><STRONG><a name="[111]"></a>AD5940_EnterSleepS</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, ad5940.o(i.AD5940_EnterSleepS))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = AD5940_EnterSleepS &rArr; AD5940_WriteReg &rArr; AD5940_ReadWrite8B &rArr; AD5940_ReadWriteNBytes &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppAMPSeqMeasureGen
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppIMPSeqMeasureGen
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppIMPCtrl
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppAMPCtrl
</UL>

<P><STRONG><a name="[ea]"></a>AD5940_FIFOCfg</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, ad5940.o(i.AD5940_FIFOCfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = AD5940_FIFOCfg &rArr; AD5940_ReadReg &rArr; AD5940_SPIReadReg &rArr; AD5940_ReadWrite8B &rArr; AD5940_ReadWriteNBytes &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ReadReg
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppVOLInit
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppIMPInit
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppAMPInit
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940PlatformCfg_VOL
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940PlatformCfg_IMP
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940PlatformCfg_AMP
</UL>

<P><STRONG><a name="[112]"></a>AD5940_FIFOCtrlS</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ad5940.o(i.AD5940_FIFOCtrlS))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = AD5940_FIFOCtrlS &rArr; AD5940_WriteReg &rArr; AD5940_ReadWrite8B &rArr; AD5940_ReadWriteNBytes &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppVOLInit
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppIMPInit
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppAMPInit
</UL>

<P><STRONG><a name="[113]"></a>AD5940_FIFOGetCnt</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ad5940.o(i.AD5940_FIFOGetCnt))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = AD5940_FIFOGetCnt &rArr; AD5940_ReadReg &rArr; AD5940_SPIReadReg &rArr; AD5940_ReadWrite8B &rArr; AD5940_ReadWriteNBytes &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppVOLISR
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppIMPISR
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppAMPISR
</UL>

<P><STRONG><a name="[114]"></a>AD5940_FIFORd</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, ad5940.o(i.AD5940_FIFORd))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = AD5940_FIFORd &rArr; AD5940_ReadWrite8B &rArr; AD5940_ReadWriteNBytes &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_CsSet
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_CsClr
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ReadWrite8B
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ReadWrite32B
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ReadWrite16B
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppVOLISR
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppIMPISR
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppAMPISR
</UL>

<P><STRONG><a name="[13c]"></a>AD5940_GetMCUIntFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, appolloh7port.o(i.AD5940_GetMCUIntFlag))
<BR><BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_Main_VOL
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_Main_IMP
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_Main_AMP
</UL>

<P><STRONG><a name="[100]"></a>AD5940_HFOSC32MHzCtrl</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, ad5940.o(i.AD5940_HFOSC32MHzCtrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = AD5940_HFOSC32MHzCtrl &rArr; AD5940_ReadReg &rArr; AD5940_SPIReadReg &rArr; AD5940_ReadWrite8B &rArr; AD5940_ReadWriteNBytes &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ReadReg
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_CLKCfg
</UL>

<P><STRONG><a name="[118]"></a>AD5940_HSDacCfgS</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, ad5940.o(i.AD5940_HSDacCfgS))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = AD5940_HSDacCfgS &rArr; AD5940_WriteReg &rArr; AD5940_ReadWrite8B &rArr; AD5940_ReadWriteNBytes &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_HSLoopCfgS
</UL>

<P><STRONG><a name="[119]"></a>AD5940_HSLoopCfgS</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, ad5940.o(i.AD5940_HSLoopCfgS))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = AD5940_HSLoopCfgS &rArr; AD5940_HSTIACfgS &rArr; AD5940_WriteReg &rArr; AD5940_ReadWrite8B &rArr; AD5940_ReadWriteNBytes &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SWMatrixCfgS
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WGCfgS
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_HSTIACfgS
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_HSDacCfgS
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppVOLSeqCfgGen
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_LPRtiaCal
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppIMPSeqCfgGen
</UL>

<P><STRONG><a name="[11a]"></a>AD5940_HSTIACfgS</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, ad5940.o(i.AD5940_HSTIACfgS))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = AD5940_HSTIACfgS &rArr; AD5940_WriteReg &rArr; AD5940_ReadWrite8B &rArr; AD5940_ReadWriteNBytes &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_HSLoopCfgS
</UL>

<P><STRONG><a name="[e7]"></a>AD5940_HWReset</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, ad5940.o(i.AD5940_HWReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = AD5940_HWReset &rArr; AD5940_Delay10us &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_RstSet
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_RstClr
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_Delay10us
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940PlatformCfg_VOL
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940PlatformCfg_IMP
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940PlatformCfg_AMP
</UL>

<P><STRONG><a name="[ec]"></a>AD5940_INTCCfg</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, ad5940.o(i.AD5940_INTCCfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = AD5940_INTCCfg &rArr; AD5940_ReadReg &rArr; AD5940_SPIReadReg &rArr; AD5940_ReadWrite8B &rArr; AD5940_ReadWriteNBytes &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ReadReg
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_LPRtiaCal
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_LFOSCMeasure
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940PlatformCfg_VOL
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940PlatformCfg_IMP
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940PlatformCfg_AMP
</UL>

<P><STRONG><a name="[ed]"></a>AD5940_INTCClrFlag</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ad5940.o(i.AD5940_INTCClrFlag))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = AD5940_INTCClrFlag &rArr; AD5940_WriteReg &rArr; AD5940_ReadWrite8B &rArr; AD5940_ReadWriteNBytes &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_LPRtiaCal
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppVOLInit
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppVOLISR
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppIMPInit
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppIMPISR
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppAMPInit
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppAMPISR
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_LFOSCMeasure
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940PlatformCfg_VOL
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940PlatformCfg_IMP
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940PlatformCfg_AMP
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__AD5940_TakeMeasurement
</UL>

<P><STRONG><a name="[11f]"></a>AD5940_INTCGetCfg</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ad5940.o(i.AD5940_INTCGetCfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = AD5940_INTCGetCfg &rArr; AD5940_ReadReg &rArr; AD5940_SPIReadReg &rArr; AD5940_ReadWrite8B &rArr; AD5940_ReadWriteNBytes &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_LPRtiaCal
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_LFOSCMeasure
</UL>

<P><STRONG><a name="[120]"></a>AD5940_INTCTestFlag</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, ad5940.o(i.AD5940_INTCTestFlag))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = AD5940_INTCTestFlag &rArr; AD5940_ReadReg &rArr; AD5940_SPIReadReg &rArr; AD5940_ReadWrite8B &rArr; AD5940_ReadWriteNBytes &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_LPRtiaCal
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppVOLInit
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppVOLISR
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppIMPInit
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppIMPISR
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppAMPInit
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppAMPISR
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_LFOSCMeasure
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__AD5940_TakeMeasurement
</UL>

<P><STRONG><a name="[e8]"></a>AD5940_Initialize</STRONG> (Thumb, 116 bytes, Stack size 128 bytes, ad5940.o(i.AD5940_Initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = AD5940_Initialize &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ReadReg
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_CsSet
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940PlatformCfg_VOL
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940PlatformCfg_IMP
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940PlatformCfg_AMP
</UL>

<P><STRONG><a name="[f0]"></a>AD5940_LFOSCMeasure</STRONG> (Thumb, 382 bytes, Stack size 152 bytes, ad5940.o(i.AD5940_LFOSCMeasure))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = AD5940_LFOSCMeasure &rArr; AD5940_SEQInfoCfg &rArr; AD5940_SEQCmdWrite &rArr; AD5940_WriteReg &rArr; AD5940_ReadWrite8B &rArr; AD5940_ReadWriteNBytes &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SEQCtrlS
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WUPTCtrl
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WUPTCfg
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SEQInfoCfg
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_INTCTestFlag
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SEQCfg
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_INTCClrFlag
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_INTCCfg
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WUPTTime
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SEQTimeOutRd
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SEQGetCfg
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_INTCGetCfg
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940PlatformCfg_AMP
</UL>

<P><STRONG><a name="[128]"></a>AD5940_LPAMPCfgS</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, ad5940.o(i.AD5940_LPAMPCfgS))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = AD5940_LPAMPCfgS &rArr; AD5940_WriteReg &rArr; AD5940_ReadWrite8B &rArr; AD5940_ReadWriteNBytes &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_LPLoopCfgS
</UL>

<P><STRONG><a name="[129]"></a>AD5940_LPDAC0WriteS</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ad5940.o(i.AD5940_LPDAC0WriteS))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = AD5940_LPDAC0WriteS &rArr; AD5940_WriteReg &rArr; AD5940_ReadWrite8B &rArr; AD5940_ReadWriteNBytes &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_LPDACCfgS
</UL>

<P><STRONG><a name="[12a]"></a>AD5940_LPDAC1WriteS</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ad5940.o(i.AD5940_LPDAC1WriteS))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = AD5940_LPDAC1WriteS &rArr; AD5940_WriteReg &rArr; AD5940_ReadWrite8B &rArr; AD5940_ReadWriteNBytes &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_LPDACCfgS
</UL>

<P><STRONG><a name="[12b]"></a>AD5940_LPDACCfgS</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, ad5940.o(i.AD5940_LPDACCfgS))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = AD5940_LPDACCfgS &rArr; AD5940_WriteReg &rArr; AD5940_ReadWrite8B &rArr; AD5940_ReadWriteNBytes &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WriteReg
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_LPDAC1WriteS
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_LPDAC0WriteS
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppVOLSeqCfgGen
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_LPLoopCfgS
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppIMPSeqCfgGen
</UL>

<P><STRONG><a name="[12c]"></a>AD5940_LPLoopCfgS</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ad5940.o(i.AD5940_LPLoopCfgS))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = AD5940_LPLoopCfgS &rArr; AD5940_LPDACCfgS &rArr; AD5940_WriteReg &rArr; AD5940_ReadWrite8B &rArr; AD5940_ReadWriteNBytes &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_LPDACCfgS
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_LPAMPCfgS
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_LPRtiaCal
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppAMPSeqCfgGen
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppIMPCtrl
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppAMPCtrl
</UL>

<P><STRONG><a name="[12d]"></a>AD5940_LPRtiaCal</STRONG> (Thumb, 1526 bytes, Stack size 472 bytes, ad5940.o(i.AD5940_LPRtiaCal))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = AD5940_LPRtiaCal &rArr; AD5940_DSPCfgS &rArr; AD5940_ADCFilterCfgS &rArr; AD5940_AFECtrlS &rArr; AD5940_ReadReg &rArr; AD5940_SPIReadReg &rArr; AD5940_ReadWrite8B &rArr; AD5940_ReadWriteNBytes &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_StructInit
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ReadReg
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WGFreqWordCal
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SWMatrixCfgS
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_LPLoopCfgS
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_INTCTestFlag
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_HSLoopCfgS
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_DSPCfgS
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_AFECtrlS
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_INTCClrFlag
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_INTCCfg
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_Delay10us
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ComplexPhase
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ComplexMag
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ComplexDivInt
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ADCBaseCfgS
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__AD5940_TakeMeasurement
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__AD5940_ReferenceON
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WriteReg
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WGDACCodeS
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ReadAfeResult
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_INTCGetCfg
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppAMPRtiaCal
</UL>

<P><STRONG><a name="[135]"></a>AD5940_MCUResourceInit</STRONG> (Thumb, 294 bytes, Stack size 48 bytes, appolloh7port.o(i.AD5940_MCUResourceInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = AD5940_MCUResourceInit &rArr; HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_RstSet
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_CsSet
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[139]"></a>AD5940_Main_AMP</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, ad5940main.o(i.AD5940_Main_AMP))
<BR><BR>[Stack]<UL><LI>Max Depth = 784 + Unknown Stack Size
<LI>Call Chain = AD5940_Main_AMP &rArr; AppAMPInit &rArr; AppAMPRtiaCal &rArr; AD5940_LPRtiaCal &rArr; AD5940_DSPCfgS &rArr; AD5940_ADCFilterCfgS &rArr; AD5940_AFECtrlS &rArr; AD5940_ReadReg &rArr; AD5940_SPIReadReg &rArr; AD5940_ReadWrite8B &rArr; AD5940_ReadWriteNBytes &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppAMPInit
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppAMPISR
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppAMPCtrl
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AMPShowResult
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940AMPStructInit
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940PlatformCfg_AMP
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_GetMCUIntFlag
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ClrMCUIntFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[140]"></a>AD5940_Main_IMP</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, ad5940main.o(i.AD5940_Main_IMP))
<BR><BR>[Stack]<UL><LI>Max Depth = 560 + Unknown Stack Size
<LI>Call Chain = AD5940_Main_IMP &rArr; AppIMPInit &rArr; AppIMPSeqCfgGen &rArr; AD5940_SweepNext &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppIMPInit
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppIMPISR
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppIMPCtrl
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ImpedanceShowResult
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940ImpedanceStructInit
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940PlatformCfg_IMP
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_GetMCUIntFlag
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ClrMCUIntFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[145]"></a>AD5940_Main_VOL</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, ad5940main.o(i.AD5940_Main_VOL))
<BR><BR>[Stack]<UL><LI>Max Depth = 560 + Unknown Stack Size
<LI>Call Chain = AD5940_Main_VOL &rArr; AppVOLInit &rArr; AppVOLSeqCfgGen &rArr; AD5940_SweepNext &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppVOLInit
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppVOLISR
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppVOLCtrl
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VoltageShowResult
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940VoltageStructInit
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940PlatformCfg_VOL
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_GetMCUIntFlag
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ClrMCUIntFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[104]"></a>AD5940_Notch50HzAvailable</STRONG> (Thumb, 158 bytes, Stack size 32 bytes, ad5940.o(i.AD5940_Notch50HzAvailable))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = AD5940_Notch50HzAvailable &rArr; _is_value_in_table
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_value_in_table
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ClksCalculate
</UL>

<P><STRONG><a name="[105]"></a>AD5940_Notch60HzAvailable</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, ad5940.o(i.AD5940_Notch60HzAvailable))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = AD5940_Notch60HzAvailable &rArr; _is_value_in_table
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_value_in_table
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ClksCalculate
</UL>

<P><STRONG><a name="[14b]"></a>AD5940_REFCfgS</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, ad5940.o(i.AD5940_REFCfgS))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = AD5940_REFCfgS &rArr; AD5940_ReadReg &rArr; AD5940_SPIReadReg &rArr; AD5940_ReadWrite8B &rArr; AD5940_ReadWriteNBytes &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ReadReg
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppVOLSeqCfgGen
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppAMPSeqCfgGen
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppIMPSeqCfgGen
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppIMPCtrl
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppAMPCtrl
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__AD5940_ReferenceON
</UL>

<P><STRONG><a name="[133]"></a>AD5940_ReadAfeResult</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, ad5940.o(i.AD5940_ReadAfeResult))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = AD5940_ReadAfeResult &rArr; AD5940_ReadReg &rArr; AD5940_SPIReadReg &rArr; AD5940_ReadWrite8B &rArr; AD5940_ReadWriteNBytes &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_LPRtiaCal
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__AD5940_TakeMeasurement
</UL>

<P><STRONG><a name="[f9]"></a>AD5940_ReadReg</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, ad5940.o(i.AD5940_ReadReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = AD5940_ReadReg &rArr; AD5940_SPIReadReg &rArr; AD5940_ReadWrite8B &rArr; AD5940_ReadWriteNBytes &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SPIReadReg
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SEQRegInfoInsert
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SEQGenSearchReg
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SEQCtrlS
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_LPRtiaCal
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WakeUp
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WUPTCtrl
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_REFCfgS
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_INTCTestFlag
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_FIFOGetCnt
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_AFECtrlS
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppAMPCtrl
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SEQCfg
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_Initialize
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_INTCCfg
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_FIFOCfg
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_CLKCfg
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_DFTCfgS
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ADCFilterCfgS
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SEQTimeOutRd
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SEQGetCfg
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ReadAfeResult
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_INTCGetCfg
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_HFOSC32MHzCtrl
</UL>

<P><STRONG><a name="[14f]"></a>AD5940_ReadWriteNBytes</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, appolloh7port.o(i.AD5940_ReadWriteNBytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = AD5940_ReadWriteNBytes &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ReadWrite8B
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ReadWrite32B
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ReadWrite16B
</UL>

<P><STRONG><a name="[11d]"></a>AD5940_RstClr</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, appolloh7port.o(i.AD5940_RstClr))
<BR><BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_HWReset
</UL>

<P><STRONG><a name="[11e]"></a>AD5940_RstSet</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, appolloh7port.o(i.AD5940_RstSet))
<BR><BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_HWReset
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_MCUResourceInit
</UL>

<P><STRONG><a name="[eb]"></a>AD5940_SEQCfg</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, ad5940.o(i.AD5940_SEQCfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = AD5940_SEQCfg &rArr; AD5940_ReadReg &rArr; AD5940_SPIReadReg &rArr; AD5940_ReadWrite8B &rArr; AD5940_ReadWriteNBytes &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ReadReg
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppVOLInit
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppIMPInit
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppAMPInit
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_LFOSCMeasure
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940PlatformCfg_AMP
</UL>

<P><STRONG><a name="[151]"></a>AD5940_SEQCmdWrite</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, ad5940.o(i.AD5940_SEQCmdWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = AD5940_SEQCmdWrite &rArr; AD5940_WriteReg &rArr; AD5940_ReadWrite8B &rArr; AD5940_ReadWriteNBytes &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppVOLSeqMeasureGen
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppVOLSeqCfgGen
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppAMPSeqMeasureGen
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppAMPSeqCfgGen
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SEQInfoCfg
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppIMPSeqMeasureGen
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppIMPSeqCfgGen
</UL>

<P><STRONG><a name="[127]"></a>AD5940_SEQCtrlS</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, ad5940.o(i.AD5940_SEQCtrlS))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = AD5940_SEQCtrlS &rArr; AD5940_ReadReg &rArr; AD5940_SPIReadReg &rArr; AD5940_ReadWrite8B &rArr; AD5940_ReadWriteNBytes &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ReadReg
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppAMPInit
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_LFOSCMeasure
</UL>

<P><STRONG><a name="[165]"></a>AD5940_SEQGenCtrl</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ad5940.o(i.AD5940_SEQGenCtrl))
<BR><BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppVOLSeqMeasureGen
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppVOLSeqCfgGen
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppAMPSeqMeasureGen
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppAMPSeqCfgGen
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppIMPSeqMeasureGen
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppIMPSeqCfgGen
</UL>

<P><STRONG><a name="[166]"></a>AD5940_SEQGenFetchSeq</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ad5940.o(i.AD5940_SEQGenFetchSeq))
<BR><BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppVOLSeqMeasureGen
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppVOLSeqCfgGen
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppAMPSeqMeasureGen
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppAMPSeqCfgGen
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppIMPSeqMeasureGen
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppIMPSeqCfgGen
</UL>

<P><STRONG><a name="[162]"></a>AD5940_SEQGenInit</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, ad5940.o(i.AD5940_SEQGenInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = AD5940_SEQGenInit
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppVOLInit
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppIMPInit
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppAMPInit
</UL>

<P><STRONG><a name="[155]"></a>AD5940_SEQGenInsert</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, ad5940.o(i.AD5940_SEQGenInsert))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = AD5940_SEQGenInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppVOLSeqMeasureGen
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppVOLSeqCfgGen
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppAMPSeqMeasureGen
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppAMPSeqCfgGen
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppIMPSeqMeasureGen
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppIMPSeqCfgGen
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SEQWriteReg
</UL>

<P><STRONG><a name="[121]"></a>AD5940_SEQGetCfg</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, ad5940.o(i.AD5940_SEQGetCfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = AD5940_SEQGetCfg &rArr; AD5940_ReadReg &rArr; AD5940_SPIReadReg &rArr; AD5940_ReadWrite8B &rArr; AD5940_ReadWriteNBytes &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_LFOSCMeasure
</UL>

<P><STRONG><a name="[152]"></a>AD5940_SEQGpioCtrlS</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ad5940.o(i.AD5940_SEQGpioCtrlS))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = AD5940_SEQGpioCtrlS &rArr; AD5940_WriteReg &rArr; AD5940_ReadWrite8B &rArr; AD5940_ReadWriteNBytes &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppVOLSeqMeasureGen
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppAMPSeqMeasureGen
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppAMPSeqCfgGen
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppIMPSeqMeasureGen
</UL>

<P><STRONG><a name="[122]"></a>AD5940_SEQInfoCfg</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, ad5940.o(i.AD5940_SEQInfoCfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = AD5940_SEQInfoCfg &rArr; AD5940_SEQCmdWrite &rArr; AD5940_WriteReg &rArr; AD5940_ReadWrite8B &rArr; AD5940_ReadWriteNBytes &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SEQCmdWrite
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppVOLInit
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppIMPInit
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppAMPInit
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_LFOSCMeasure
</UL>

<P><STRONG><a name="[153]"></a>AD5940_SEQMmrTrig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ad5940.o(i.AD5940_SEQMmrTrig))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = AD5940_SEQMmrTrig &rArr; AD5940_WriteReg &rArr; AD5940_ReadWrite8B &rArr; AD5940_ReadWriteNBytes &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppVOLInit
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppIMPInit
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppAMPInit
</UL>

<P><STRONG><a name="[125]"></a>AD5940_SEQTimeOutRd</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ad5940.o(i.AD5940_SEQTimeOutRd))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = AD5940_SEQTimeOutRd &rArr; AD5940_ReadReg &rArr; AD5940_SPIReadReg &rArr; AD5940_ReadWrite8B &rArr; AD5940_ReadWriteNBytes &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_LFOSCMeasure
</UL>

<P><STRONG><a name="[11b]"></a>AD5940_SWMatrixCfgS</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, ad5940.o(i.AD5940_SWMatrixCfgS))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = AD5940_SWMatrixCfgS &rArr; AD5940_WriteReg &rArr; AD5940_ReadWrite8B &rArr; AD5940_ReadWriteNBytes &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppVOLSeqMeasureGen
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_LPRtiaCal
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppAMPSeqCfgGen
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_HSLoopCfgS
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppIMPSeqMeasureGen
</UL>

<P><STRONG><a name="[ef]"></a>AD5940_SleepKeyCtrlS</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ad5940.o(i.AD5940_SleepKeyCtrlS))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = AD5940_SleepKeyCtrlS &rArr; AD5940_WriteReg &rArr; AD5940_ReadWrite8B &rArr; AD5940_ReadWriteNBytes &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppVOLISR
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppIMPISR
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppAMPISR
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940PlatformCfg_VOL
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940PlatformCfg_IMP
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940PlatformCfg_AMP
</UL>

<P><STRONG><a name="[10f]"></a>AD5940_StatisticCfgS</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, ad5940.o(i.AD5940_StatisticCfgS))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = AD5940_StatisticCfgS &rArr; AD5940_WriteReg &rArr; AD5940_ReadWrite8B &rArr; AD5940_ReadWriteNBytes &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_DSPCfgS
</UL>

<P><STRONG><a name="[12f]"></a>AD5940_StructInit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ad5940.o(i.AD5940_StructInit))
<BR><BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_LPRtiaCal
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppAMPRtiaCal
</UL>

<P><STRONG><a name="[157]"></a>AD5940_SweepNext</STRONG> (Thumb, 276 bytes, Stack size 16 bytes, ad5940.o(i.AD5940_SweepNext))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = AD5940_SweepNext &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log10
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppVOLSeqCfgGen
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppIMPDataProcess
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppIMPSeqCfgGen
</UL>

<P><STRONG><a name="[11c]"></a>AD5940_WGCfgS</STRONG> (Thumb, 160 bytes, Stack size 8 bytes, ad5940.o(i.AD5940_WGCfgS))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = AD5940_WGCfgS &rArr; AD5940_WriteReg &rArr; AD5940_ReadWrite8B &rArr; AD5940_ReadWriteNBytes &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_HSLoopCfgS
</UL>

<P><STRONG><a name="[130]"></a>AD5940_WGDACCodeS</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, ad5940.o(i.AD5940_WGDACCodeS))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = AD5940_WGDACCodeS &rArr; AD5940_WriteReg &rArr; AD5940_ReadWrite8B &rArr; AD5940_ReadWriteNBytes &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_LPRtiaCal
</UL>

<P><STRONG><a name="[15a]"></a>AD5940_WGFreqCtrlS</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ad5940.o(i.AD5940_WGFreqCtrlS))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = AD5940_WGFreqCtrlS &rArr; AD5940_WriteReg &rArr; AD5940_ReadWrite8B &rArr; AD5940_ReadWriteNBytes &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WGFreqWordCal
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppIMPRegModify
</UL>

<P><STRONG><a name="[132]"></a>AD5940_WGFreqWordCal</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, ad5940.o(i.AD5940_WGFreqWordCal))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = AD5940_WGFreqWordCal
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_l2f
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppVOLSeqCfgGen
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_LPRtiaCal
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WGFreqCtrlS
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppIMPSeqCfgGen
</UL>

<P><STRONG><a name="[123]"></a>AD5940_WUPTCfg</STRONG> (Thumb, 342 bytes, Stack size 24 bytes, ad5940.o(i.AD5940_WUPTCfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = AD5940_WUPTCfg &rArr; AD5940_WriteReg &rArr; AD5940_ReadWrite8B &rArr; AD5940_ReadWriteNBytes &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppVOLCtrl
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppIMPCtrl
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppAMPCtrl
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_LFOSCMeasure
</UL>

<P><STRONG><a name="[124]"></a>AD5940_WUPTCtrl</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, ad5940.o(i.AD5940_WUPTCtrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = AD5940_WUPTCtrl &rArr; AD5940_ReadReg &rArr; AD5940_SPIReadReg &rArr; AD5940_ReadWrite8B &rArr; AD5940_ReadWriteNBytes &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ReadReg
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppIMPRegModify
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppVOLISR
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppIMPCtrl
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppAMPISR
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppAMPCtrl
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_LFOSCMeasure
</UL>

<P><STRONG><a name="[126]"></a>AD5940_WUPTTime</STRONG> (Thumb, 190 bytes, Stack size 16 bytes, ad5940.o(i.AD5940_WUPTTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = AD5940_WUPTTime &rArr; AD5940_WriteReg &rArr; AD5940_ReadWrite8B &rArr; AD5940_ReadWriteNBytes &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_LFOSCMeasure
</UL>

<P><STRONG><a name="[15d]"></a>AD5940_WakeUp</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, ad5940.o(i.AD5940_WakeUp))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = AD5940_WakeUp &rArr; AD5940_ReadReg &rArr; AD5940_SPIReadReg &rArr; AD5940_ReadWrite8B &rArr; AD5940_ReadWriteNBytes &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppVOLInit
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppVOLISR
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppVOLCtrl
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppIMPInit
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppIMPISR
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppIMPCtrl
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppAMPInit
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppAMPISR
</UL>

<P><STRONG><a name="[f6]"></a>AD5940_WriteReg</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, ad5940.o(i.AD5940_WriteReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = AD5940_WriteReg &rArr; AD5940_ReadWrite8B &rArr; AD5940_ReadWriteNBytes &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_CsSet
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_CsClr
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SEQWriteReg
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ReadWrite8B
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ReadWrite32B
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ReadWrite16B
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SEQCtrlS
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_LPRtiaCal
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WUPTCtrl
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WUPTCfg
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WGFreqCtrlS
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SWMatrixCfgS
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SEQMmrTrig
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SEQInfoCfg
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SEQGpioCtrlS
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SEQCmdWrite
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_REFCfgS
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_LPDACCfgS
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_FIFOCtrlS
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_EnterSleepS
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_AFEPwrBW
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_AFECtrlS
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SleepKeyCtrlS
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SEQCfg
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_Initialize
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_INTCClrFlag
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_INTCCfg
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_FIFOCfg
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_CLKCfg
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_AGPIOCfg
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_DFTCfgS
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_AGPIOPen
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_AGPIOOen
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_AGPIOIen
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_AGPIOFuncCfg
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ADCFilterCfgS
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ADCDigCompCfgS
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ADCBaseCfgS
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WUPTTime
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WGDACCodeS
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WGCfgS
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_StatisticCfgS
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_LPDAC1WriteS
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_LPDAC0WriteS
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_LPAMPCfgS
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_HSTIACfgS
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_HSDacCfgS
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_HFOSC32MHzCtrl
</UL>

<P><STRONG><a name="[13f]"></a>AMPShowResult</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, ad5940main.o(i.AMPShowResult))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = AMPShowResult &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_Main_AMP
</UL>

<P><STRONG><a name="[15e]"></a>AppAMPCalcCurrent</STRONG> (Thumb, 26 bytes, Stack size 4 bytes, amperometric.o(i.AppAMPCalcCurrent))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = AppAMPCalcCurrent
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppAMPCalcVoltage
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppAMPISR
</UL>

<P><STRONG><a name="[15f]"></a>AppAMPCalcVoltage</STRONG> (Thumb, 124 bytes, Stack size 0 bytes, amperometric.o(i.AppAMPCalcVoltage))
<BR><BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppAMPCalcCurrent
</UL>

<P><STRONG><a name="[13b]"></a>AppAMPCtrl</STRONG> (Thumb, 170 bytes, Stack size 96 bytes, amperometric.o(i.AppAMPCtrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + In Cycle
<LI>Call Chain = AppAMPCtrl &rArr;  AppAMPCtrl (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ReadReg
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WUPTCtrl
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WUPTCfg
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_REFCfgS
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_LPLoopCfgS
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_EnterSleepS
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppAMPCtrl
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppAMPCtrl
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_Main_AMP
</UL>

<P><STRONG><a name="[e3]"></a>AppAMPGetCfg</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, amperometric.o(i.AppAMPGetCfg))
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940AMPStructInit
</UL>

<P><STRONG><a name="[13e]"></a>AppAMPISR</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, amperometric.o(i.AppAMPISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = AppAMPISR &rArr; AD5940_WakeUp &rArr; AD5940_ReadReg &rArr; AD5940_SPIReadReg &rArr; AD5940_ReadWrite8B &rArr; AD5940_ReadWriteNBytes &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppAMPCalcCurrent
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WakeUp
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WUPTCtrl
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_INTCTestFlag
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_FIFORd
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_FIFOGetCnt
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SleepKeyCtrlS
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_INTCClrFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_Main_AMP
</UL>

<P><STRONG><a name="[13a]"></a>AppAMPInit</STRONG> (Thumb, 272 bytes, Stack size 56 bytes, amperometric.o(i.AppAMPInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 776<LI>Call Chain = AppAMPInit &rArr; AppAMPRtiaCal &rArr; AD5940_LPRtiaCal &rArr; AD5940_DSPCfgS &rArr; AD5940_ADCFilterCfgS &rArr; AD5940_AFECtrlS &rArr; AD5940_ReadReg &rArr; AD5940_SPIReadReg &rArr; AD5940_ReadWrite8B &rArr; AD5940_ReadWriteNBytes &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SEQCtrlS
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppAMPSeqMeasureGen
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppAMPSeqCfgGen
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppAMPRtiaCal
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WakeUp
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SEQMmrTrig
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SEQInfoCfg
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SEQGenInit
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_INTCTestFlag
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_FIFOCtrlS
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_AFEPwrBW
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SEQCfg
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_INTCClrFlag
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_FIFOCfg
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ClrMCUIntFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_Main_AMP
</UL>

<P><STRONG><a name="[142]"></a>AppIMPCtrl</STRONG> (Thumb, 210 bytes, Stack size 96 bytes, impedance.o(i.AppIMPCtrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + In Cycle
<LI>Call Chain = AppIMPCtrl &rArr;  AppIMPCtrl (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WakeUp
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WUPTCtrl
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WUPTCfg
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_REFCfgS
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_LPLoopCfgS
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_EnterSleepS
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppIMPCtrl
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppIMPCtrl
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ImpedanceShowResult
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_Main_IMP
</UL>

<P><STRONG><a name="[167]"></a>AppIMPDataProcess</STRONG> (Thumb, 302 bytes, Stack size 56 bytes, impedance.o(i.AppIMPDataProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = AppIMPDataProcess &rArr; AD5940_SweepNext &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SweepNext
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppIMPISR
</UL>

<P><STRONG><a name="[e5]"></a>AppIMPGetCfg</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, impedance.o(i.AppIMPGetCfg))
<BR><BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940ImpedanceStructInit
</UL>

<P><STRONG><a name="[143]"></a>AppIMPISR</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, impedance.o(i.AppIMPISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = AppIMPISR &rArr; AppIMPDataProcess &rArr; AD5940_SweepNext &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WakeUp
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_INTCTestFlag
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_FIFORd
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_FIFOGetCnt
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppIMPRegModify
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppIMPDataProcess
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SleepKeyCtrlS
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_INTCClrFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_Main_IMP
</UL>

<P><STRONG><a name="[141]"></a>AppIMPInit</STRONG> (Thumb, 240 bytes, Stack size 56 bytes, impedance.o(i.AppIMPInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = AppIMPInit &rArr; AppIMPSeqCfgGen &rArr; AD5940_SweepNext &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WakeUp
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SEQMmrTrig
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SEQInfoCfg
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SEQGenInit
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_INTCTestFlag
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_FIFOCtrlS
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_AFEPwrBW
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppIMPSeqMeasureGen
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppIMPSeqCfgGen
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SEQCfg
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_INTCClrFlag
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_FIFOCfg
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ClrMCUIntFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_Main_IMP
</UL>

<P><STRONG><a name="[168]"></a>AppIMPRegModify</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, impedance.o(i.AppIMPRegModify))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = AppIMPRegModify &rArr; AD5940_WUPTCtrl &rArr; AD5940_ReadReg &rArr; AD5940_SPIReadReg &rArr; AD5940_ReadWrite8B &rArr; AD5940_ReadWriteNBytes &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WUPTCtrl
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WGFreqCtrlS
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppIMPISR
</UL>

<P><STRONG><a name="[147]"></a>AppVOLCtrl</STRONG> (Thumb, 128 bytes, Stack size 88 bytes, voltage.o(i.AppVOLCtrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = AppVOLCtrl &rArr; AD5940_WakeUp &rArr; AD5940_ReadReg &rArr; AD5940_SPIReadReg &rArr; AD5940_ReadWrite8B &rArr; AD5940_ReadWriteNBytes &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WakeUp
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WUPTCfg
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VoltageShowResult
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_Main_VOL
</UL>

<P><STRONG><a name="[16b]"></a>AppVOLDataProcess</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, voltage.o(i.AppVOLDataProcess))
<BR><BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppVOLISR
</UL>

<P><STRONG><a name="[148]"></a>AppVOLISR</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, voltage.o(i.AppVOLISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = AppVOLISR &rArr; AD5940_WakeUp &rArr; AD5940_ReadReg &rArr; AD5940_SPIReadReg &rArr; AD5940_ReadWrite8B &rArr; AD5940_ReadWriteNBytes &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppVOLDataProcess
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WakeUp
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WUPTCtrl
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_INTCTestFlag
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_FIFORd
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_FIFOGetCnt
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SleepKeyCtrlS
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_INTCClrFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_Main_VOL
</UL>

<P><STRONG><a name="[146]"></a>AppVOLInit</STRONG> (Thumb, 240 bytes, Stack size 56 bytes, voltage.o(i.AppVOLInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = AppVOLInit &rArr; AppVOLSeqCfgGen &rArr; AD5940_SweepNext &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppVOLSeqMeasureGen
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppVOLSeqCfgGen
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WakeUp
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SEQMmrTrig
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SEQInfoCfg
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SEQGenInit
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_INTCTestFlag
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_FIFOCtrlS
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_AFEPwrBW
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SEQCfg
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_INTCClrFlag
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_FIFOCfg
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ClrMCUIntFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_Main_VOL
</UL>

<P><STRONG><a name="[8]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_it.o(i.BusFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32h7xx_it.o(i.EXTI9_5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EXTI9_5_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[19d]"></a>Error_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(i.Error_Handler))
<BR><BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART3_UART_Init
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI3_Init
</UL>

<P><STRONG><a name="[18c]"></a>HAL_DMA_Abort_IT</STRONG> (Thumb, 602 bytes, Stack size 40 bytes, stm32h7xx_hal_dma.o(i.HAL_DMA_Abort_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_DMA_Abort_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[110]"></a>HAL_Delay</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, stm32h7xx_hal.o(i.HAL_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_Delay10us
</UL>

<P><STRONG><a name="[170]"></a>HAL_GPIO_EXTI_Callback</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, appolloh7port.o(i.HAL_GPIO_EXTI_Callback))
<BR><BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>

<P><STRONG><a name="[16e]"></a>HAL_GPIO_EXTI_IRQHandler</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32h7xx_hal_gpio.o(i.HAL_GPIO_EXTI_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
</UL>

<P><STRONG><a name="[136]"></a>HAL_GPIO_Init</STRONG> (Thumb, 510 bytes, Stack size 44 bytes, stm32h7xx_hal_gpio.o(i.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_MCUResourceInit
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
</UL>

<P><STRONG><a name="[10b]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32h7xx_hal_gpio.o(i.HAL_GPIO_WritePin))
<BR><BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_RstSet
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_RstClr
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_CsSet
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_CsClr
</UL>

<P><STRONG><a name="[183]"></a>HAL_GetREVID</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32h7xx_hal.o(i.HAL_GetREVID))
<BR><BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
</UL>

<P><STRONG><a name="[16f]"></a>HAL_GetTick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32h7xx_hal.o(i.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_ConfigSupply
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitOnFlagUntilTimeout
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLL3_Config
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLL2_Config
</UL>

<P><STRONG><a name="[1a1]"></a>HAL_IncTick</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32h7xx_hal.o(i.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[171]"></a>HAL_Init</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, stm32h7xx_hal.o(i.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[174]"></a>HAL_InitTick</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, stm32h7xx_hal.o(i.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[175]"></a>HAL_MspInit</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32h7xx_hal_msp.o(i.HAL_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[138]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32h7xx_hal_cortex.o(i.HAL_NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_MCUResourceInit
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>

<P><STRONG><a name="[177]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, stm32h7xx_hal_cortex.o(i.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>

<P><STRONG><a name="[172]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, stm32h7xx_hal_cortex.o(i.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_NVIC_SetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[179]"></a>HAL_PWREx_ConfigSupply</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, stm32h7xx_hal_pwr_ex.o(i.HAL_PWREx_ConfigSupply))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_PWREx_ConfigSupply
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[17a]"></a>HAL_RCCEx_GetD3PCLK1Freq</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm32h7xx_hal_rcc_ex.o(i.HAL_RCCEx_GetD3PCLK1Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HAL_RCCEx_GetD3PCLK1Freq &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[1a3]"></a>HAL_RCCEx_GetPLL2ClockFreq</STRONG> (Thumb, 296 bytes, Stack size 12 bytes, stm32h7xx_hal_rcc_ex.o(i.HAL_RCCEx_GetPLL2ClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_RCCEx_GetPLL2ClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[1a4]"></a>HAL_RCCEx_GetPLL3ClockFreq</STRONG> (Thumb, 296 bytes, Stack size 12 bytes, stm32h7xx_hal_rcc_ex.o(i.HAL_RCCEx_GetPLL3ClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_RCCEx_GetPLL3ClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[17c]"></a>HAL_RCCEx_PeriphCLKConfig</STRONG> (Thumb, 2234 bytes, Stack size 48 bytes, stm32h7xx_hal_rcc_ex.o(i.HAL_RCCEx_PeriphCLKConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLL3_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLL3_Config
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLL2_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[17f]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 580 bytes, Stack size 40 bytes, stm32h7xx_hal_rcc.o(i.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[17b]"></a>HAL_RCC_GetHCLKFreq</STRONG> (Thumb, 52 bytes, Stack size 12 bytes, stm32h7xx_hal_rcc.o(i.HAL_RCC_GetHCLKFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetD3PCLK1Freq
</UL>

<P><STRONG><a name="[180]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 26 bytes, Stack size 4 bytes, stm32h7xx_hal_rcc.o(i.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_RCC_GetPCLK1Freq &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[181]"></a>HAL_RCC_GetPCLK2Freq</STRONG> (Thumb, 26 bytes, Stack size 4 bytes, stm32h7xx_hal_rcc.o(i.HAL_RCC_GetPCLK2Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_RCC_GetPCLK2Freq &rArr; HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[173]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 278 bytes, Stack size 16 bytes, stm32h7xx_hal_rcc.o(i.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>

<P><STRONG><a name="[182]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 1282 bytes, Stack size 40 bytes, stm32h7xx_hal_rcc.o(i.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_RCC_OscConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetREVID
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[137]"></a>HAL_SPI_Init</STRONG> (Thumb, 308 bytes, Stack size 32 bytes, stm32h7xx_hal_spi.o(i.HAL_SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI3_Init
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_MCUResourceInit
</UL>

<P><STRONG><a name="[184]"></a>HAL_SPI_MspInit</STRONG> (Thumb, 130 bytes, Stack size 40 bytes, spi.o(i.HAL_SPI_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
</UL>

<P><STRONG><a name="[150]"></a>HAL_SPI_TransmitReceive</STRONG> (Thumb, 800 bytes, Stack size 64 bytes, stm32h7xx_hal_spi.o(i.HAL_SPI_TransmitReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitOnFlagUntilTimeout
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CloseTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ReadWriteNBytes
</UL>

<P><STRONG><a name="[176]"></a>HAL_SYSTICK_Config</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, stm32h7xx_hal_cortex.o(i.HAL_SYSTICK_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_SYSTICK_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[19f]"></a>HAL_UARTEx_DisableFifoMode</STRONG> (Thumb, 64 bytes, Stack size 12 bytes, stm32h7xx_hal_uart_ex.o(i.HAL_UARTEx_DisableFifoMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_UARTEx_DisableFifoMode
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART3_UART_Init
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
</UL>

<P><STRONG><a name="[191]"></a>HAL_UARTEx_RxFifoFullCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_uart_ex.o(i.HAL_UARTEx_RxFifoFullCallback))
<BR><BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[187]"></a>HAL_UARTEx_SetRxFifoThreshold</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, stm32h7xx_hal_uart_ex.o(i.HAL_UARTEx_SetRxFifoThreshold))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = HAL_UARTEx_SetRxFifoThreshold &rArr; UARTEx_SetNbDataToProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTEx_SetNbDataToProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART3_UART_Init
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
</UL>

<P><STRONG><a name="[189]"></a>HAL_UARTEx_SetTxFifoThreshold</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, stm32h7xx_hal_uart_ex.o(i.HAL_UARTEx_SetTxFifoThreshold))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = HAL_UARTEx_SetTxFifoThreshold &rArr; UARTEx_SetNbDataToProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTEx_SetNbDataToProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART3_UART_Init
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
</UL>

<P><STRONG><a name="[190]"></a>HAL_UARTEx_TxFifoEmptyCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_uart_ex.o(i.HAL_UARTEx_TxFifoEmptyCallback))
<BR><BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[18e]"></a>HAL_UARTEx_WakeupCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_uart_ex.o(i.HAL_UARTEx_WakeupCallback))
<BR><BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[18d]"></a>HAL_UART_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_uart.o(i.HAL_UART_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAAbortOnError
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[18a]"></a>HAL_UART_IRQHandler</STRONG> (Thumb, 436 bytes, Stack size 24 bytes, stm32h7xx_hal_uart.o(i.HAL_UART_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_UART_IRQHandler &rArr; HAL_DMA_Abort_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndRxTransfer
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxCpltCallback
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_WakeupCallback
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_TxFifoEmptyCallback
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxFifoFullCallback
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[192]"></a>HAL_UART_Init</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, stm32h7xx_hal_uart.o(i.HAL_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = HAL_UART_Init &rArr; UART_SetConfig &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_AdvFeatureConfig
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART3_UART_Init
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
</UL>

<P><STRONG><a name="[193]"></a>HAL_UART_MspInit</STRONG> (Thumb, 186 bytes, Stack size 40 bytes, usart.o(i.HAL_UART_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[199]"></a>HAL_UART_Receive_IT</STRONG> (Thumb, 232 bytes, Stack size 16 bytes, stm32h7xx_hal_uart.o(i.HAL_UART_Receive_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_UART_Receive_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
</UL>

<P><STRONG><a name="[197]"></a>HAL_UART_RxCpltCallback</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, main.o(i.HAL_UART_RxCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_UART_RxCpltCallback &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_8BIT_FIFOEN
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_8BIT
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_16BIT_FIFOEN
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_16BIT
</UL>

<P><STRONG><a name="[198]"></a>HAL_UART_Transmit</STRONG> (Thumb, 190 bytes, Stack size 32 bytes, stm32h7xx_hal_uart.o(i.HAL_UART_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
</UL>

<P><STRONG><a name="[18f]"></a>HAL_UART_TxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_uart.o(i.HAL_UART_TxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[6]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_it.o(i.HardFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[144]"></a>ImpedanceShowResult</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, ad5940main.o(i.ImpedanceShowResult))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = ImpedanceShowResult &rArr; AppIMPCtrl &rArr;  AppIMPCtrl (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppIMPCtrl
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_Main_IMP
</UL>

<P><STRONG><a name="[19b]"></a>MX_GPIO_Init</STRONG> (Thumb, 152 bytes, Stack size 40 bytes, gpio.o(i.MX_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = MX_GPIO_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[19c]"></a>MX_SPI3_Init</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, spi.o(i.MX_SPI3_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = MX_SPI3_Init &rArr; HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[19e]"></a>MX_USART1_UART_Init</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, usart.o(i.MX_USART1_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = MX_USART1_UART_Init &rArr; HAL_UART_Init &rArr; UART_SetConfig &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_SetTxFifoThreshold
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_SetRxFifoThreshold
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_DisableFifoMode
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1a0]"></a>MX_USART3_UART_Init</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, usart.o(i.MX_USART3_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = MX_USART3_UART_Init &rArr; HAL_UART_Init &rArr; UART_SetConfig &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_SetTxFifoThreshold
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_SetRxFifoThreshold
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_DisableFifoMode
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_it.o(i.MemManage_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_it.o(i.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>SysTick_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32h7xx_it.o(i.SysTick_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[1a2]"></a>SystemClock_Config</STRONG> (Thumb, 170 bytes, Stack size 312 bytes, main.o(i.SystemClock_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = SystemClock_Config &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLL3_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_ConfigSupply
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[99]"></a>SystemInit</STRONG> (Thumb, 188 bytes, Stack size 20 bytes, system_stm32h7xx.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SystemInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(.text)
</UL>
<P><STRONG><a name="[195]"></a>UART_AdvFeatureConfig</STRONG> (Thumb, 200 bytes, Stack size 0 bytes, stm32h7xx_hal_uart.o(i.UART_AdvFeatureConfig))
<BR><BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[196]"></a>UART_CheckIdleState</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, stm32h7xx_hal_uart.o(i.UART_CheckIdleState))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = UART_CheckIdleState &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[194]"></a>UART_SetConfig</STRONG> (Thumb, 878 bytes, Stack size 56 bytes, stm32h7xx_hal_uart.o(i.UART_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = UART_SetConfig &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPLL3ClockFreq
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPLL2ClockFreq
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetD3PCLK1Freq
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[19a]"></a>UART_WaitOnFlagUntilTimeout</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, stm32h7xx_hal_uart.o(i.UART_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
</UL>

<P><STRONG><a name="[33]"></a>USART1_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32h7xx_it.o(i.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = USART1_IRQHandler &rArr; HAL_UART_IRQHandler &rArr; HAL_DMA_Abort_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>USART3_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32h7xx_it.o(i.USART3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = USART3_IRQHandler &rArr; HAL_UART_IRQHandler &rArr; HAL_DMA_Abort_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_it.o(i.UsageFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[149]"></a>VoltageShowResult</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, ad5940main.o(i.VoltageShowResult))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = VoltageShowResult &rArr; AppVOLCtrl &rArr; AD5940_WakeUp &rArr; AD5940_ReadReg &rArr; AD5940_SPIReadReg &rArr; AD5940_ReadWrite8B &rArr; AD5940_ReadWriteNBytes &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppVOLCtrl
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_Main_VOL
</UL>

<P><STRONG><a name="[d4]"></a>__ARM_fpclassify</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_fpclassify
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[1a6]"></a>__hardfp_atan</STRONG> (Thumb, 402 bytes, Stack size 40 bytes, atan.o(i.__hardfp_atan))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __hardfp_atan &rArr; __ARM_fpclassify
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fabs
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
</UL>

<P><STRONG><a name="[109]"></a>__hardfp_atan2</STRONG> (Thumb, 380 bytes, Stack size 48 bytes, atan2.o(i.__hardfp_atan2))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = __hardfp_atan2 &rArr; atan &rArr; __hardfp_atan &rArr; __ARM_fpclassify
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fabs
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppIMPDataProcess
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ComplexPhase
</UL>

<P><STRONG><a name="[1ad]"></a>__hardfp_log</STRONG> (Thumb, 480 bytes, Stack size 88 bytes, log.o(i.__hardfp_log))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __hardfp_log &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
</UL>

<P><STRONG><a name="[158]"></a>__hardfp_log10</STRONG> (Thumb, 214 bytes, Stack size 24 bytes, log10.o(i.__hardfp_log10))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = __hardfp_log10 &rArr; log &rArr; __hardfp_log &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SweepNext
</UL>

<P><STRONG><a name="[159]"></a>__hardfp_pow</STRONG> (Thumb, 2140 bytes, Stack size 192 bytes, pow.o(i.__hardfp_pow))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fabs
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SweepNext
</UL>

<P><STRONG><a name="[107]"></a>__hardfp_sqrt</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, sqrt.o(i.__hardfp_sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __hardfp_sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppIMPDataProcess
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ComplexMag
</UL>

<P><STRONG><a name="[1aa]"></a>__kernel_poly</STRONG> (Thumb, 112 bytes, Stack size 0 bytes, poly.o(i.__kernel_poly))
<BR><BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[1af]"></a>__mathlib_dbl_divzero</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_divzero))
<BR><BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log10
</UL>

<P><STRONG><a name="[1a7]"></a>__mathlib_dbl_infnan</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_infnan))
<BR><BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log10
</UL>

<P><STRONG><a name="[1ab]"></a>__mathlib_dbl_infnan2</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_infnan2))
<BR><BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
</UL>

<P><STRONG><a name="[1ae]"></a>__mathlib_dbl_invalid</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_invalid))
<BR><BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log10
</UL>

<P><STRONG><a name="[1b1]"></a>__mathlib_dbl_overflow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_overflow))
<BR><BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[1a8]"></a>__mathlib_dbl_underflow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_underflow))
<BR><BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[c6]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, __printf_wp.o(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[1ac]"></a>atan</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, atan.o(i.atan))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = atan &rArr; __hardfp_atan &rArr; __ARM_fpclassify
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
</UL>

<P><STRONG><a name="[1a9]"></a>fabs</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, fabs.o(i.fabs))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fabs
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
</UL>

<P><STRONG><a name="[9b]"></a>fputc</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, usart.o(i.fputc))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_file.o(.text)
</UL>
<P><STRONG><a name="[f4]"></a>get_APPVOLGetCfg</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, voltage.o(i.get_APPVOLGetCfg))
<BR><BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940VoltageStructInit
</UL>

<P><STRONG><a name="[1b0]"></a>log</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, log.o(i.log))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = log &rArr; __hardfp_log &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log10
</UL>

<P><STRONG><a name="[b9]"></a>main</STRONG> (Thumb, 94 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 784 + Unknown Stack Size
<LI>Call Chain = main &rArr; AD5940_Main_AMP &rArr; AppAMPInit &rArr; AppAMPRtiaCal &rArr; AD5940_LPRtiaCal &rArr; AD5940_DSPCfgS &rArr; AD5940_ADCFilterCfgS &rArr; AD5940_AFECtrlS &rArr; AD5940_ReadReg &rArr; AD5940_SPIReadReg &rArr; AD5940_ReadWrite8B &rArr; AD5940_ReadWriteNBytes &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART3_UART_Init
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI3_Init
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_IT
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_Main_VOL
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_Main_IMP
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_Main_AMP
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_MCUResourceInit
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[1b2]"></a>sqrt</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, sqrt.o(i.sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[b3]"></a>_get_lc_numeric</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_numeric_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _get_lc_numeric
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_numeric_2
</UL>

<P><STRONG><a name="[1b5]"></a>__fpl_dcheck_NaN1</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dcheck1.o(x$fpl$dcheck1))
<BR><BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>

<P><STRONG><a name="[1f1]"></a>__aeabi_ul2f</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ffltll_clz.o(x$fpl$ffltll), UNUSED)

<P><STRONG><a name="[1f2]"></a>_ll_uto_f</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ffltll_clz.o(x$fpl$ffltll), UNUSED)

<P><STRONG><a name="[15c]"></a>__aeabi_l2f</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ffltll_clz.o(x$fpl$ffltll))
<BR><BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WGFreqWordCal
</UL>

<P><STRONG><a name="[1f3]"></a>_ll_sto_f</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, ffltll_clz.o(x$fpl$ffltll), UNUSED)

<P><STRONG><a name="[af]"></a>_fp_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fpinit.o(x$fpl$fpinit))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_fp_1
</UL>

<P><STRONG><a name="[1f4]"></a>__fplib_config_fpu_vfp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[1f5]"></a>__fplib_config_pureend_doubles</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[a7]"></a>_printf_fp_dec</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, printf1.o(x$fpl$printf1))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_f
</UL>

<P><STRONG><a name="[1b6]"></a>__fpl_return_NaN</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, retnan.o(x$fpl$retnan))
<BR><BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_cmpreturn
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN1
</UL>

<P><STRONG><a name="[1b3]"></a>__ARM_scalbn</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, scalbn.o(x$fpl$scalbn))
<BR><BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN1
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[1b7]"></a>__fpl_cmpreturn</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, trapv.o(x$fpl$trapveneer))
<BR><BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[e6]"></a>AD5940PlatformCfg_AMP</STRONG> (Thumb, 212 bytes, Stack size 96 bytes, ad5940main.o(i.AD5940PlatformCfg_AMP))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = AD5940PlatformCfg_AMP &rArr; AD5940_LFOSCMeasure &rArr; AD5940_SEQInfoCfg &rArr; AD5940_SEQCmdWrite &rArr; AD5940_WriteReg &rArr; AD5940_ReadWrite8B &rArr; AD5940_ReadWriteNBytes &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SleepKeyCtrlS
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SEQCfg
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_LFOSCMeasure
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_Initialize
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_INTCClrFlag
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_INTCCfg
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_HWReset
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_FIFOCfg
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_CLKCfg
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_AGPIOCfg
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_Main_AMP
</UL>

<P><STRONG><a name="[f1]"></a>AD5940PlatformCfg_IMP</STRONG> (Thumb, 144 bytes, Stack size 72 bytes, ad5940main.o(i.AD5940PlatformCfg_IMP))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = AD5940PlatformCfg_IMP &rArr; AD5940_Initialize &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SleepKeyCtrlS
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_Initialize
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_INTCClrFlag
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_INTCCfg
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_HWReset
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_FIFOCfg
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_CLKCfg
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_AGPIOCfg
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_Main_IMP
</UL>

<P><STRONG><a name="[f2]"></a>AD5940PlatformCfg_VOL</STRONG> (Thumb, 144 bytes, Stack size 72 bytes, ad5940main.o(i.AD5940PlatformCfg_VOL))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = AD5940PlatformCfg_VOL &rArr; AD5940_Initialize &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SleepKeyCtrlS
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_Initialize
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_INTCClrFlag
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_INTCCfg
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_HWReset
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_FIFOCfg
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_CLKCfg
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_AGPIOCfg
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_Main_VOL
</UL>

<P><STRONG><a name="[169]"></a>AppIMPSeqCfgGen</STRONG> (Thumb, 570 bytes, Stack size 256 bytes, impedance.o(i.AppIMPSeqCfgGen))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = AppIMPSeqCfgGen &rArr; AD5940_SweepNext &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WGFreqWordCal
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SweepNext
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SEQGenInsert
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SEQGenFetchSeq
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SEQGenCtrl
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SEQCmdWrite
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_REFCfgS
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_LPDACCfgS
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_HSLoopCfgS
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_DSPCfgS
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_AFECtrlS
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppIMPInit
</UL>

<P><STRONG><a name="[16a]"></a>AppIMPSeqMeasureGen</STRONG> (Thumb, 320 bytes, Stack size 88 bytes, impedance.o(i.AppIMPSeqMeasureGen))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = AppIMPSeqMeasureGen &rArr; AD5940_ClksCalculate &rArr;  AD5940_ClksCalculate (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SWMatrixCfgS
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SEQGpioCtrlS
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SEQGenInsert
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SEQGenFetchSeq
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SEQGenCtrl
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SEQCmdWrite
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_EnterSleepS
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ClksCalculate
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_AFECtrlS
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppIMPInit
</UL>

<P><STRONG><a name="[161]"></a>AppAMPRtiaCal</STRONG> (Thumb, 126 bytes, Stack size 72 bytes, amperometric.o(i.AppAMPRtiaCal))
<BR><BR>[Stack]<UL><LI>Max Depth = 720<LI>Call Chain = AppAMPRtiaCal &rArr; AD5940_LPRtiaCal &rArr; AD5940_DSPCfgS &rArr; AD5940_ADCFilterCfgS &rArr; AD5940_AFECtrlS &rArr; AD5940_ReadReg &rArr; AD5940_SPIReadReg &rArr; AD5940_ReadWrite8B &rArr; AD5940_ReadWriteNBytes &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_StructInit
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_LPRtiaCal
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppAMPInit
</UL>

<P><STRONG><a name="[163]"></a>AppAMPSeqCfgGen</STRONG> (Thumb, 380 bytes, Stack size 184 bytes, amperometric.o(i.AppAMPSeqCfgGen))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = AppAMPSeqCfgGen &rArr; AD5940_DSPCfgS &rArr; AD5940_ADCFilterCfgS &rArr; AD5940_AFECtrlS &rArr; AD5940_ReadReg &rArr; AD5940_SPIReadReg &rArr; AD5940_ReadWrite8B &rArr; AD5940_ReadWriteNBytes &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SWMatrixCfgS
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SEQGpioCtrlS
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SEQGenInsert
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SEQGenFetchSeq
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SEQGenCtrl
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SEQCmdWrite
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_REFCfgS
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_LPLoopCfgS
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_DSPCfgS
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_AFECtrlS
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppAMPInit
</UL>

<P><STRONG><a name="[164]"></a>AppAMPSeqMeasureGen</STRONG> (Thumb, 182 bytes, Stack size 64 bytes, amperometric.o(i.AppAMPSeqMeasureGen))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = AppAMPSeqMeasureGen &rArr; AD5940_ClksCalculate &rArr;  AD5940_ClksCalculate (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SEQGpioCtrlS
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SEQGenInsert
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SEQGenFetchSeq
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SEQGenCtrl
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SEQCmdWrite
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_EnterSleepS
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ClksCalculate
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_AFECtrlS
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppAMPInit
</UL>

<P><STRONG><a name="[16c]"></a>AppVOLSeqCfgGen</STRONG> (Thumb, 566 bytes, Stack size 256 bytes, voltage.o(i.AppVOLSeqCfgGen))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = AppVOLSeqCfgGen &rArr; AD5940_SweepNext &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WGFreqWordCal
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SweepNext
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SEQGenInsert
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SEQGenFetchSeq
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SEQGenCtrl
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SEQCmdWrite
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_REFCfgS
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_LPDACCfgS
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_HSLoopCfgS
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_DSPCfgS
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_AFECtrlS
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppVOLInit
</UL>

<P><STRONG><a name="[16d]"></a>AppVOLSeqMeasureGen</STRONG> (Thumb, 202 bytes, Stack size 80 bytes, voltage.o(i.AppVOLSeqMeasureGen))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = AppVOLSeqMeasureGen &rArr; AD5940_ClksCalculate &rArr;  AD5940_ClksCalculate (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SWMatrixCfgS
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SEQGpioCtrlS
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SEQGenInsert
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SEQGenFetchSeq
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SEQGenCtrl
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SEQCmdWrite
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ClksCalculate
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_AFECtrlS
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppVOLInit
</UL>

<P><STRONG><a name="[178]"></a>__NVIC_SetPriority</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32h7xx_hal_cortex.o(i.__NVIC_SetPriority))
<BR><BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
</UL>

<P><STRONG><a name="[185]"></a>SPI_CloseTransfer</STRONG> (Thumb, 188 bytes, Stack size 8 bytes, stm32h7xx_hal_spi.o(i.SPI_CloseTransfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_CloseTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
</UL>

<P><STRONG><a name="[186]"></a>SPI_WaitOnFlagUntilTimeout</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, stm32h7xx_hal_spi.o(i.SPI_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
</UL>

<P><STRONG><a name="[17d]"></a>RCCEx_PLL2_Config</STRONG> (Thumb, 284 bytes, Stack size 32 bytes, stm32h7xx_hal_rcc_ex.o(i.RCCEx_PLL2_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RCCEx_PLL2_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
</UL>

<P><STRONG><a name="[17e]"></a>RCCEx_PLL3_Config</STRONG> (Thumb, 284 bytes, Stack size 32 bytes, stm32h7xx_hal_rcc_ex.o(i.RCCEx_PLL3_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RCCEx_PLL3_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
</UL>

<P><STRONG><a name="[9d]"></a>UART_DMAAbortOnError</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32h7xx_hal_uart.o(i.UART_DMAAbortOnError))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_DMAAbortOnError
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32h7xx_hal_uart.o(i.HAL_UART_IRQHandler)
</UL>
<P><STRONG><a name="[18b]"></a>UART_EndRxTransfer</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, stm32h7xx_hal_uart.o(i.UART_EndRxTransfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = UART_EndRxTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[a1]"></a>UART_RxISR_16BIT</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, stm32h7xx_hal_uart.o(i.UART_RxISR_16BIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = UART_RxISR_16BIT &rArr; HAL_UART_RxCpltCallback &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
</UL>
<BR>[Address Reference Count : 2]<UL><LI> stm32h7xx_hal_uart.o(i.HAL_UART_Receive_IT)
<LI> stm32h7xx_hal_uart.o(i.UART_RxISR_16BIT_FIFOEN)
</UL>
<P><STRONG><a name="[9f]"></a>UART_RxISR_16BIT_FIFOEN</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, stm32h7xx_hal_uart.o(i.UART_RxISR_16BIT_FIFOEN))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = UART_RxISR_16BIT_FIFOEN &rArr; HAL_UART_RxCpltCallback &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32h7xx_hal_uart.o(i.HAL_UART_Receive_IT)
</UL>
<P><STRONG><a name="[a0]"></a>UART_RxISR_8BIT</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, stm32h7xx_hal_uart.o(i.UART_RxISR_8BIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = UART_RxISR_8BIT &rArr; HAL_UART_RxCpltCallback &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
</UL>
<BR>[Address Reference Count : 2]<UL><LI> stm32h7xx_hal_uart.o(i.HAL_UART_Receive_IT)
<LI> stm32h7xx_hal_uart.o(i.UART_RxISR_8BIT_FIFOEN)
</UL>
<P><STRONG><a name="[9e]"></a>UART_RxISR_8BIT_FIFOEN</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, stm32h7xx_hal_uart.o(i.UART_RxISR_8BIT_FIFOEN))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = UART_RxISR_8BIT_FIFOEN &rArr; HAL_UART_RxCpltCallback &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32h7xx_hal_uart.o(i.HAL_UART_Receive_IT)
</UL>
<P><STRONG><a name="[188]"></a>UARTEx_SetNbDataToProcess</STRONG> (Thumb, 82 bytes, Stack size 28 bytes, stm32h7xx_hal_uart_ex.o(i.UARTEx_SetNbDataToProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = UARTEx_SetNbDataToProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_SetTxFifoThreshold
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_SetRxFifoThreshold
</UL>

<P><STRONG><a name="[116]"></a>AD5940_ReadWrite16B</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, ad5940.o(i.AD5940_ReadWrite16B))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = AD5940_ReadWrite16B &rArr; AD5940_ReadWriteNBytes &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ReadWriteNBytes
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_FIFORd
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SPIReadReg
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WriteReg
</UL>

<P><STRONG><a name="[117]"></a>AD5940_ReadWrite32B</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, ad5940.o(i.AD5940_ReadWrite32B))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = AD5940_ReadWrite32B &rArr; AD5940_ReadWriteNBytes &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ReadWriteNBytes
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_FIFORd
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SPIReadReg
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WriteReg
</UL>

<P><STRONG><a name="[115]"></a>AD5940_ReadWrite8B</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, ad5940.o(i.AD5940_ReadWrite8B))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = AD5940_ReadWrite8B &rArr; AD5940_ReadWriteNBytes &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ReadWriteNBytes
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_FIFORd
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SPIReadReg
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WriteReg
</UL>

<P><STRONG><a name="[14d]"></a>AD5940_SEQGenSearchReg</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, ad5940.o(i.AD5940_SEQGenSearchReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = AD5940_SEQGenSearchReg
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ReadReg
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SEQWriteReg
</UL>

<P><STRONG><a name="[14e]"></a>AD5940_SEQRegInfoInsert</STRONG> (Thumb, 52 bytes, Stack size 12 bytes, ad5940.o(i.AD5940_SEQRegInfoInsert))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = AD5940_SEQRegInfoInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ReadReg
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SEQWriteReg
</UL>

<P><STRONG><a name="[154]"></a>AD5940_SEQWriteReg</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, ad5940.o(i.AD5940_SEQWriteReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = AD5940_SEQWriteReg &rArr; AD5940_SEQRegInfoInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SEQGenInsert
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SEQRegInfoInsert
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_SEQGenSearchReg
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_WriteReg
</UL>

<P><STRONG><a name="[14c]"></a>AD5940_SPIReadReg</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, ad5940.o(i.AD5940_SPIReadReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = AD5940_SPIReadReg &rArr; AD5940_ReadWrite8B &rArr; AD5940_ReadWriteNBytes &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_CsSet
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_CsClr
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ReadWrite8B
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ReadWrite32B
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ReadWrite16B
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ReadReg
</UL>

<P><STRONG><a name="[12e]"></a>__AD5940_ReferenceON</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, ad5940.o(i.__AD5940_ReferenceON))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = __AD5940_ReferenceON &rArr; AD5940_REFCfgS &rArr; AD5940_ReadReg &rArr; AD5940_SPIReadReg &rArr; AD5940_ReadWrite8B &rArr; AD5940_ReadWriteNBytes &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_REFCfgS
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_LPRtiaCal
</UL>

<P><STRONG><a name="[131]"></a>__AD5940_TakeMeasurement</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, ad5940.o(i.__AD5940_TakeMeasurement))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = __AD5940_TakeMeasurement &rArr; AD5940_AFECtrlS &rArr; AD5940_ReadReg &rArr; AD5940_SPIReadReg &rArr; AD5940_ReadWrite8B &rArr; AD5940_ReadWriteNBytes &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_INTCTestFlag
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_AFECtrlS
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_INTCClrFlag
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_Delay10us
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_ReadAfeResult
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_LPRtiaCal
</UL>

<P><STRONG><a name="[14a]"></a>_is_value_in_table</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, ad5940.o(i._is_value_in_table))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _is_value_in_table
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_Notch60HzAvailable
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AD5940_Notch50HzAvailable
</UL>

<P><STRONG><a name="[cd]"></a>_fp_digits</STRONG> (Thumb, 432 bytes, Stack size 96 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[9c]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
